use std::str::FromStr;

use crate::ast;

grammar;

match {
    "{", "}", "(", ")", "[", "]", ";", ":", ".", ",", "::", "::<", "=>",
    "const", "mut", "if", "elif", "else", "for", "in", "wiles", "func", 
    "break", "struct", "enum", "match",
    "=", "==", ">", "<", "+", "-", "*", "/",
    "Array", "Bool", "Func", "Number", "String", "Void",

    r"[a-zA-Z_][a-zA-Z_0-9]*", // symbols
    r"-?[0-9]+(\.[0-9]+)?",    // number literals
    r"'[^']*'",                // string literals

    // skip these:
    r"\s*" => { },                                        // whitespace 
    r"//[^\n\r]*[\n\r]*" => { },                          // line comment
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // block comment
}

pub Program: ast::Program = {
    <Block> => ast::Program::Block(<>),
    <Lines> => ast::Program::Lines(<>)
}

Block: Vec<ast::Line> = {
    "{" <Lines> "}" => <>
}

pub Lines: Vec<ast::Line> = {
    <s:Line+> => s
};

Line: ast::Line = {
    "const" <i:Identifier> <t:TypeDeclaration?> "=" <e:Expr> ";" => ast::Line::Declare(i, e, t, false),
    "mut" <i:Identifier> <t:TypeDeclaration?> "="  <e:Expr> ";" => ast::Line::Declare(i, e, t, true),
    <c:IfElseChain> => ast::Line::IfElseChain(Box::new(c)),
    "for" <i:Identifier> "in" <e:Expr> <b:Block> => ast::Line::For(i,e,b),
    "wiles" "(" <e:Expr> ")" <b:Block> => ast::Line::Wiles(e,b),
    "func" <i:Identifier> <t:TypeParams?> "(" <p:Params> ")" ":" <r:TypeVariant> <b:Block> => 
        ast::Line::Func(ast::funcs::FuncDeclare { ident: i, params: p, return_type: r, type_param: t, block: Box::new(ast::FuncVariant::Nala(b))}),
    "break" "(" <Expr> ")" ";" => ast::Line::Break(<>),
    "struct" <i:Identifier> <t:TypeParams?> "{" <ff:StructFields> "}" => ast::Line::Struct(i, t, ff), 
    "enum" <i:Identifier> <t:TypeParams?> "{" <v:VariantsDeclare> "}" => ast::Line::Enum(i, t, v), 
    <s:PlaceExpression> "=" <e:Expr> ";" => ast::Line::Assign(s, e),
    <Expr> ";" => ast::Line::Expr(<>),
    <Match> => ast::Line::Match(<>)
};

TypeDeclaration: ast::types::type_literal_variant::TypeVariantLiteral = {
    ":" <TypeVariant> => <>
};

TypeParams: String = {
    "<" <i:Identifier> ">" => i
};

TypeArgs: ast::types::type_literal_variant::TypeVariantLiteral = {
    "<" <t:TypeVariant> ">" => <>
};

IfElseChain: ast::branching::IfElseChain = { 
    "if" "(" <c:Expr> ")" <b:Block> <ei:ElseIf*> <e:Else?> => 
        ast::branching::IfElseChain { cond: c, block: b, else_ifs: ei, else_block: e },
};

Match: ast::branching::Match = {
    "match" "(" <e:Expr> ")" "{" <c:MatchCase*> "}" => ast::branching::Match { expr: e, cases: c }
};

MatchCase: ast::branching::MatchCase = {
    <p:Pattern> "=>" <b:Block> => ast::branching::MatchCase { pattern: p, block: b }
};

Pattern: ast::patterns::Pattern = {
    <e:Identifier> "::" <v:Identifier> "(" <i:Identifier> ")" => ast::patterns::Pattern::Variant(e, v, Some(i)),
    <e:Identifier> "::" <v:Identifier> => ast::patterns::Pattern::Variant(e, v, None),
};

ElseIf: ast::branching::ElseIf = {
    "elif" "(" <e:Expr> ")" <b:Block> => ast::branching::ElseIf{ cond: e, block: b }
};

Else: ast::branching::Else = {
    "else" <Block> => ast::branching::Else{ block: <> }
};

PlaceExpression: ast::PlaceExpression = {
    <p:PlaceExpression> "[" <e:Expr> "]" => ast::PlaceExpression::Index(Box::new(p), Box::new(e)),
    <p:PlaceExpression> "." <i:Identifier> => ast::PlaceExpression::MemberAccess(Box::new(p), i),
    <Identifier> => ast::PlaceExpression::Identifier(<>),
};

VariantsDeclare = Comma<VariantDeclare>;

VariantDeclare: ast::types::variant_declare::VariantDeclare = {
    <Identifier> => ast::types::variant_declare::VariantDeclare::Empty(<>),
    <i:Identifier> "(" <t:TypeVariant> ")" => ast::types::variant_declare::VariantDeclare::Data(i, t)
};

Elems = Comma<Expr>;

Expr: ast::Expr = {
    <l:Expr> "==" <r:EnumVariantOrAddition> => ast::Expr::Eq(Box::new(l), r),
    Comparison,
};

Comparison: ast::Expr = {
    <l:Comparison> ">" <r:Addition> => ast::Expr::Gt(Box::new(l), r),
    <l:Comparison> "<" <r:Addition> => ast::Expr::Lt(Box::new(l), r),
    EnumVariantOrAddition => ast::Expr::EnumVariant(<>),
}

EnumVariantOrAddition: ast::types::enum_variant::EnumVariantOrAddition = {
    <i:Identifier> "::" <ii:Identifier> "(" <e:Expr> ")" => ast::types::enum_variant::EnumVariantOrAddition::EnumVariant(i, ii, Some(Box::new(e))),
    <i:Identifier> "::" <ii:Identifier> => ast::types::enum_variant::EnumVariantOrAddition::EnumVariant(i, ii, None),
    Addition => ast::types::enum_variant::EnumVariantOrAddition::Addition(<>),
};

pub Addition: ast::math::Addition = {
    <l:Addition> "+" <r:Multiplication> => ast::math::Addition::Add(Box::new(l), r),
    <l:Addition> "-" <r:Multiplication> => ast::math::Addition::Sub(Box::new(l), r),
    Multiplication =>  ast::math::Addition::Multiplication(<>)
};

pub Multiplication: ast::math::Multiplication = {
    <l:Multiplication> "*" <t:Term> => ast::math::Multiplication::Mult(Box::new(l), t),
    <l:Multiplication> "/" <t:Term> => ast::math::Multiplication::Div(Box::new(l), t), 
    Unary => ast::math::Multiplication::Unary(<>),
};

// Placeholder for unary operators
Unary: ast::Unary = {
    Primary => ast::Unary::Primary(<>),
}

Primary: ast::Primary = {
    Literal => ast::Primary::Literal(<>),
    Call => ast::Primary::Call(<>),
    Array => ast::Primary::Array(<>),
    Object => ast::Primary::Object(<>),
}

Call: ast::funcs::Call = {
    <p:PlaceExpression> <t:CallTypeArgs?> "(" <e:Elems> ")" => ast::funcs::Call::Call(p, t, e),
    <PlaceExpression> => ast::funcs::Call::PlaceExpression(<>),
};

KeyValuePairs = Comma<KeyValuePair>;

KeyValuePair: ast::objects::KeyValuePair = {
    <i:Identifier> ":" <e:Expr> => ast::objects::KeyValuePair{ key: i, value: Box::new(e)}
}

Params = Comma<Param>;

Param: ast::funcs::ParamDeclare = {
    <i:Identifier> ":" <t:TypeVariant> => ast::funcs::ParamDeclare { ident: i, param_type: t }
}

Object: ast::objects::Object = {
    "{" <KeyValuePairs> "}" => ast::objects::Object { entries: <>}
}

Array: ast::arrays::Array = {
    "[" <Elems> "]" => ast::arrays::Array { elems: <> },
};

StructFields = Comma<StructField>;

StructField: ast::types::StructLiteralField = {
    <i:Identifier> ":" <t:TypeVariant> => ast::types::StructLiteralField { ident: i, value: ast::types::StructLiteralFieldValue::Type(t) },
    <i:Identifier> ":" "{" <ff:StructFields> "}" => ast::types::StructLiteralField { ident: i, value: ast::types::StructLiteralFieldValue::Nested(ff) }
}

TypeVariants = Comma<TypeVariant>;

TypeVariant: ast::types::type_literal_variant::TypeVariantLiteral = {
    <t:Type> "<" <tt:TypeVariants> ">" => ast::types::type_literal_variant::TypeVariantLiteral::Composite(t, tt),
    <Type> => ast::types::type_literal_variant::TypeVariantLiteral::Type(<>),
}

Type: ast::types::type_literal::TypeLiteral = {
    <PrimitiveType> => ast::types::type_literal::TypeLiteral::PrimitiveType(<>),
    <Identifier> => ast::types::type_literal::TypeLiteral::UserDefined(<>),
}

PrimitiveType: ast::types::primitive_type::PrimitiveType = {
    "Array" => ast::types::primitive_type::PrimitiveType::Array,
    "Bool" => ast::types::primitive_type::PrimitiveType::Bool,
    "Func" => ast::types::primitive_type::PrimitiveType::Func,
    "Number" => ast::types::primitive_type::PrimitiveType::Number,
    "String" => ast::types::primitive_type::PrimitiveType::String,
    "Void" => ast::types::primitive_type::PrimitiveType::Void,
}


// TODO: This uses Rust-style turbofish just to avoid a parse conflict. Do we really need to do that?
CallTypeArgs: ast::types::type_literal_variant::TypeVariantLiteral = {
    "::<" <t:TypeVariant> ">" => <>,
}

Literal: ast::terms::Literal = {
    Num => ast::terms::Literal::Number(<>),
    Str => ast::terms::Literal::String(<>),
}

Term: ast::terms::Term = {
    Identifier => ast::terms::Term::Identifier(<>),
    Literal => ast::terms::Term::Literal(<>),
};

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => String::from_str(<>).unwrap()
};

// TODO: Should `-` be part of the literal or an operator?
Num: f32 = {
    r"-?[0-9]+(\.[0-9]+)?" => f32::from_str(<>).unwrap(),
};


// TODO: Support double quotes and escape sequences.
Str: String = {
    r"'[^']*'" => String::from_str(&<>[1..<>.len() - 1]).unwrap(),
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
