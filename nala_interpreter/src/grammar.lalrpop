use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <Block> => ast::Program::Block(<>),
    <Stmts> => ast::Program::Stmts(<>)
}

Block: ast::Block = {
    "{" <Stmts> "}" => ast::Block::NalaBlock(<>)
}

pub Stmts: ast::Stmts = {
    <ss:Stmts> <s:Stmt> => ast::Stmts::Stmts(Box::new(ss), s),
    Stmt => ast::Stmts::Stmt(<>),
};

Stmt: ast::Stmt = {
    "const" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, false),
    "mut" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, true),
    "if" "(" <e:Expr> ")" <b:Block> => ast::Stmt::If(e, Box::new(b)),
    "for" <s:Symbol> "in" <e:Expr> <b:Block> => ast::Stmt::For(s,e, Box::new(b)),
    "wiles" "(" <e:Expr> ")" <b:Block> => ast::Stmt::Wiles(e, Box::new(b)),
    "func" <s:Symbol> "(" <p:Params> ")" <b:Block> => ast::Stmt::Func(ast::funcs::Func{ ident: s, params: p, block: Box::new(b)}),
    "break" "(" <Expr> ")" ";" => ast::Stmt::Break(<>),
    <s:PlaceExpression> "=" <e:Expr> ";" => ast::Stmt::Assign(s, e),
    <e:Expr> ";" => ast::Stmt::Expr(e),
};

PlaceExpression: ast::PlaceExpression = {
    <s:Symbol> "[" <e:Expr> "]" => ast::PlaceExpression::Index(s, Box::new(e)),
    <MemberAccess> => ast::PlaceExpression::MemberAccess(<>),
    <Symbol> => ast::PlaceExpression::Symbol(<>),
};

VariantsDeclare = Comma<VariantDeclare>;

VariantDeclare: ast::VariantDeclare = {
    <Symbol> => ast::VariantDeclare::Empty(<>),
    <s:Symbol> "(" <t:TypeVariant> ")" => ast::VariantDeclare::Data(s, t)
};

Expr: ast::Expr = {
    <l:Expr> "==" <r:Addend> => ast::Expr::Eq(Box::new(l), r),
    <l:Expr> ">" <r:Addend> => ast::Expr::Gt(Box::new(l), r),
    <l:Expr> "<" <r:Addend> => ast::Expr::Lt(Box::new(l), r),
    Addend => ast::Expr::Addend(<>),
    Array => ast::Expr::Array(<>),
    Object => ast::Expr::Object(<>),
};

Object: ast::objects::Object = {
    "{" <KeyValuePairs> "}" => ast::objects::Object { entries: <>}
}

KeyValuePairs = Comma<KeyValuePair>;

KeyValuePair: ast::objects::KeyValuePair = {
    <s:Symbol> ":" <e:Expr> => ast::objects::KeyValuePair{ key: s, value: Box::new(e)}
}

Array: ast::arrays::Array = {
    "[" <Elems> "]" => ast::arrays::Array { elems: <> },
};

Elems = Comma<Expr>;
Params = Comma<Param>;

Param: ast::funcs::Param = {
    <s:Symbol> ":" <t:TypeVariant> => ast::funcs::Param { ident: s, param_type: t }
}

TypeVariants = Comma<TypeVariant>;

TypeVariant: ast::types::TypeVariant = {
    <t:Type> "<" <tt:TypeVariants> ">" => ast::types::TypeVariant::Nested(t, tt),
    <Type> => ast::types::TypeVariant::Type(<>),
}

Type: ast::types::Type = {
    <PrimitiveType> => ast::types::Type::PrimitiveType(<>),
    <Symbol> => ast::types::Type::UserDefined(<>),
}

PrimitiveType: ast::types::PrimitiveType = {
    "Array" => ast::types::PrimitiveType::Array,
    "Bool" => ast::types::PrimitiveType::Bool,
    "Func" => ast::types::PrimitiveType::Func,
    "Number" => ast::types::PrimitiveType::Number,
    "String" => ast::types::PrimitiveType::String,
}

pub Addend: ast::math::Addend = {
    <l:Addend> "+" <r:Factor> => ast::math::Addend::Add(Box::new(l), r),
    <l:Addend> "-" <r:Factor> => ast::math::Addend::Sub(Box::new(l), r),
    Factor =>  ast::math::Addend::Factor(<>)
};

pub Factor: ast::math::Factor = {
    <l:Factor> "*" <t:Term> => ast::math::Factor::Mult(Box::new(l), t),
    <l:Factor> "/" <t:Term> => ast::math::Factor::Div(Box::new(l), t), 
    Call => ast::math::Factor::Call(<>),
};

Call: ast::funcs::Call = {
    <s:Symbol> "(" <e:Elems> ")" => ast::funcs::Call::Call(s, e),
    <MemberAccess> => ast::funcs::Call::MemberAccess(<>),
    <Term> => ast::funcs::Call::Term(<>)
};

// TODO: This doesn't support indexing at the end of a member access chain. 
// Might just be as simple as using <SymbolOrIndex>?
MemberAccess: ast::objects::MemberAccess = {
    <m:MemberAccess> "." <s:Symbol> => ast::objects::MemberAccess::MemberAccesses(Box::new(m), s),
    <s:Symbol> "." <ss:Symbol> => ast::objects::MemberAccess::MemberAccess(s, ss)
}

Index: ast::arrays::Index = {
    <s:Symbol> "[" <e:Expr> "]" => ast::arrays::Index::Index(s, Box::new(e)),
};

// TODO: Index operations are non-terminal.
Term: ast::terms::Term = {
    Index => ast::terms::Term::Index(<>),
    Symbol => ast::terms::Term::Identifier(<>),
    Value => ast::terms::Term::Value(<>),
};

Value: ast::terms::Value = {
    Num => ast::terms::Value::Num(<>),
    Str => ast::terms::Value::String(<>),
}

Symbol: String = {
    r"[a-zA-Z]+" => String::from_str(<>).unwrap()
};

Num: f32 = {
    r"-?[0-9]+(\.[0-9]+)?" => f32::from_str(<>).unwrap(),
};

Str: String = {
    r"'[^']*'" => String::from_str(&<>[1..<>.len() - 1]).unwrap(),
};

Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};