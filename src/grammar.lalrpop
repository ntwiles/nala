use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <Block> => ast::Program::Block(<>),
    <Stmts> => ast::Program::Stmts(<>)
}

Block: ast::Block = {
    "{" <Stmts> "}" => ast::Block::NalaBlock(<>)
}

pub Stmts: ast::Stmts = {
    <ss:Stmts> <s:Stmt> => ast::Stmts::Stmts(Box::new(ss), s),
    Stmt => ast::Stmts::Stmt(<>),
};

// TODO: Instead of two entries for func here, use lalrpop macros like ? or +.
Stmt: ast::Stmt = {
    "const" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, false),
    "mut" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, true),
    "if" "(" <e:Expr> ")" <b:Block> => ast::Stmt::If(e, Box::new(b)),
    "for" <s:Symbol> "in" <e:Expr> <b:Block> => ast::Stmt::For(s,e, Box::new(b)),
    "wiles" "(" <e:Expr> ")" <b:Block> => ast::Stmt::Wiles(e, Box::new(b)),
    "func" <s:Symbol> "(" <p:Params> ")" <b:Block> => ast::Stmt::Func(ast::funcs::Func{ ident: s, params: Box::new(p), block: Box::new(b)}),
    "func" <s:Symbol> "(" ")" <b:Block> => ast::Stmt::Func(ast::funcs::Func { ident: s, params: Box::new(ast::funcs::Params::Empty), block: Box::new(b)}),
    "enum" <s:Symbol> "{" <v:VariantsDeclare> "}" => ast::Stmt::Enum(s, Box::new(v)),
    "break" "(" <Expr> ")" ";" => ast::Stmt::Break(<>),
    <s:PlaceExpression> "=" <e:Expr> ";" => ast::Stmt::Assign(s, e),
    <e:Expr> ";" => ast::Stmt::Expr(e),
};

PlaceExpression: ast::PlaceExpression = {
    <s:Symbol> "[" <e:Expr> "]" => ast::PlaceExpression::Index(s, Box::new(e)),
    <Symbol> => ast::PlaceExpression::Symbol(<>),
    <MemberAccess> => ast::PlaceExpression::MemberAccess(<>),
};

VariantsDeclare: ast::VariantsDeclare = {
    <vv:VariantsDeclare> "," <v:VariantDeclare> => ast::VariantsDeclare::Variants(Box::new(vv), v),
    <VariantDeclare> => ast::VariantsDeclare::Variant(<>)
};

VariantDeclare: ast::VariantDeclare = {
    <Symbol> => ast::VariantDeclare::Empty(<>),
    <s:Symbol> "(" <t:Type> ")" => ast::VariantDeclare::Data(s, t)
};

// TODO: We're using VariantValue for equals, that should be pattern matching instead.
Expr: ast::Expr = {
    <l:Expr> "is" <p:Pattern> => ast::Expr::IsPattern(Box::new(l), p),
    <l:Expr> "==" <k:VariantValue> => ast::Expr::Eq(Box::new(l), k),
    <l:Expr> ">" <r:Addend> => ast::Expr::Gt(Box::new(l), r),
    <l:Expr> "<" <r:Addend> => ast::Expr::Lt(Box::new(l), r),
    VariantValue => ast::Expr::VariantValue(<>),
    Array => ast::Expr::Array(<>),
    Object => ast::Expr::Object(<>),
};

Pattern: ast::patterns::Pattern = {
    <e:Symbol> "::" <v:Symbol> "(" "$" ")" => ast::patterns::Pattern::Enum(e, v)
}

VariantValue: ast::VariantValue = {
    <s:Symbol> "::" <v:Symbol> => ast::VariantValue::VariantValue(s, v),
    <s:Symbol> "::" <v:Symbol> "(" <e:Expr> ")" => ast::VariantValue::VariantValueWithData(s, v, Box::new(e)),

    Addend => ast::VariantValue::Addend(<>),
}

Object: ast::objects::Object = {
    "{" <KeyValuePairs> "}" => ast::objects::Object { entries: Box::new(<>)}
}

KeyValuePairs: ast::objects::KeyValuePairs = {
    <kk:KeyValuePairs> "," <k:KeyValuePair> => ast::objects::KeyValuePairs::KeyValuePairs(Box::new(kk), k),
    <KeyValuePair> => ast::objects::KeyValuePairs::KeyValuePair(<>),
};

KeyValuePair: ast::objects::KeyValuePair = {
    <s:Symbol> ":" <e:Expr> => ast::objects::KeyValuePair{ key: s, value: Box::new(e)}
}

Array: ast::arrays::Array = {
    "[" <Elems> "]" => ast::arrays::Array { elems: Box::new(<>) },
    "[" "]" => ast::arrays::Array { elems: Box::new(ast::arrays::Elems::Empty) },
};

Elems: ast::arrays::Elems = {
    <ee:Elems> "," <e:Expr> => ast::arrays::Elems::Elems(Box::new(ee), e),
    <Expr> => ast::arrays::Elems::Expr(<>),
};

Params: ast::funcs::Params = {
    <pp:Params> "," <p:Param> => ast::funcs::Params::Params(Box::new(pp), p),
    <Param> => ast::funcs::Params::Param(<>)
}

Param: ast::funcs::Param = {
    <s:Symbol> ":" <t:Type> => ast::funcs::Param { ident: s, param_type: t }
}

Types: ast::types::Types = {
    <tt:Types> "," <t:Type> => ast::types::Types::Types(Box::new(tt), t),
    <Type> => ast::types::Types::Type(<>)
}

Type: ast::types::TypeVariant = {
    <p:PrimitiveType> "<" <tt:Types> ">" => ast::types::TypeVariant::Nested(p, Box::new(tt)),
    <PrimitiveType> => ast::types::TypeVariant::Primitive(<>),
    <PrimitiveInterface> => ast::types::TypeVariant::Interface(<>)
}

PrimitiveType: ast::types::PrimitiveType = {
    "Array" => ast::types::PrimitiveType::Array,
    "Bool" => ast::types::PrimitiveType::Bool,
    "Func" => ast::types::PrimitiveType::Func,
    "Number" => ast::types::PrimitiveType::Number,
    "String" => ast::types::PrimitiveType::String,
}

// TODO: This allows for example a function to accept two arguments 
// which each implement IAdd, but which will throw an error when adding together.
// Implementing generics with interface constraints might solve this problem.
PrimitiveInterface: ast::types::PrimitiveInterface = {
    "IAdd" => ast::types::PrimitiveInterface::IAdd,
    "ICompare" => ast::types::PrimitiveInterface::ICompare,
    "IDivide" => ast::types::PrimitiveInterface::IDivide,
    "IEqual" => ast::types::PrimitiveInterface::IEqual,
    "IMultiply" => ast::types::PrimitiveInterface::IMultiply,
    "IPrint" => ast::types::PrimitiveInterface::IPrint,
    "ISubtract" => ast::types::PrimitiveInterface::ISubtract
}

pub Addend: ast::math::Addend = {
    <l:Addend> "+" <r:Factor> => ast::math::Addend::Add(Box::new(l), r),
    <l:Addend> "-" <r:Factor> => ast::math::Addend::Sub(Box::new(l), r),
    Factor =>  ast::math::Addend::Factor(<>)
};

pub Factor: ast::math::Factor = {
    <l:Factor> "*" <r:SymbolOrTerm> => ast::math::Factor::Mult(Box::new(l), r),
    <l:Factor> "/" <r:SymbolOrTerm> => ast::math::Factor::Div(Box::new(l), r), 
    Call => ast::math::Factor::Call(<>),
};

Call: ast::funcs::Call = {
    <s:Symbol> "(" <e:Elems> ")" => ast::funcs::Call::Call(s, Box::new(e)),
    <s:Symbol> "(" ")" => ast::funcs::Call::Call(s, Box::new(ast::arrays::Elems::Empty)),
    <MemberAccess> => ast::funcs::Call::MemberAccess(<>),
    <Index> => ast::funcs::Call::Index(<>)
};

// TODO: This doesn't support indexing at the end of a member access chain. 
// Might just be as simple as using <SymbolOrIndex>?
MemberAccess: ast::objects::MemberAccess = {
    <m:MemberAccess> "." <s:Symbol> => ast::objects::MemberAccess::MemberAccesses(Box::new(m), s),
    <s:Symbol> "." <ss:Symbol> => ast::objects::MemberAccess::MemberAccess(s, ss)
}

Index: ast::arrays::Index = {
    <s:Symbol> "[" <e:Expr> "]" => ast::arrays::Index::Index(s, Box::new(e)),
    <SymbolOrTerm> => ast::arrays::Index::SymbolOrTerm(<>)
};

SymbolOrTerm: ast::terms::SymbolOrTerm = {
    <Symbol> => ast::terms::SymbolOrTerm::Symbol(<>),
    <Term> => ast::terms::SymbolOrTerm::Term(<>)
};

Term: ast::terms::Term = {
    Num => ast::terms::Term::Num(<>),
    Str => ast::terms::Term::String(<>)
};

Symbol: String = {
    r"[a-zA-Z]+" => String::from_str(<>).unwrap()
};

Num: f32 = {
    r"-?[0-9]+(\.[0-9]+)?" => f32::from_str(<>).unwrap(),
};

Str: String = {
    r"'[^']*'" => String::from_str(&<>[1..<>.len() - 1]).unwrap(),
};