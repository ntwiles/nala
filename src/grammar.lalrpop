use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <p:Program> <s:Stmt> => ast::Program::Stmts(Box::new(p), s),
    <s:Stmt> => ast::Program::Stmt(s),
};

Stmt: ast::Stmt = {
    "print" <Expr> ";" => ast::Stmt::Print(<>),
};

Expr: ast::Expr = {
    <l:Expr> "+" <r:Factor> => ast::Expr::Add(Box::new(l), r),
    <l:Expr> "-" <r:Factor> => ast::Expr::Sub(Box::new(l), r),
    <f:Factor> =>  ast::Expr::Factor(f)
};

Factor: ast::Factor = {
    <l:Factor> "*" <r:Term>  => ast::Factor::Mult(Box::new(l), r),
    <l:Factor> "/" <r:Term> => ast::Factor::Div(Box::new(l), r), 
    <t:Term> => ast::Factor::Term(t)
};

Term: ast::Term = {
    <n:Num> => ast::Term::Num(n),
    <s:Str> => ast::Term::String(s)
};

Num: f32 = {
    r"[0-9]+" => f32::from_str(<>).unwrap(),
};

Str: String = {
    <s:r"'[a-zA-z0-9\s]*'"> => 
        String::from_str(&s[1..s.len() - 1]).unwrap(),
};