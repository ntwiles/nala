use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <Block> => ast::Program::Block(<>),
    <Stmts> => ast::Program::Stmts(<>)
}

Block: ast::Block = {
    "{" <Stmts> "}" => ast::Block::NalaBlock(<>)
}

pub Stmts: ast::Stmts = {
    <ss:Stmts> <s:Stmt> => ast::Stmts::Stmts(Box::new(ss), s),
    Stmt => ast::Stmts::Stmt(<>),
};

// TODO: Instead of two entries for func here, use lalrpop macros like ? or +.
Stmt: ast::Stmt = {
    "const" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, false),
    "mut" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, true),
    "if" "(" <e:Expr> ")" <b:Block> => ast::Stmt::If(e, Box::new(b)),
    "for" <s:Symbol> "in" <e:Expr> <b:Block> => ast::Stmt::For(s,e, Box::new(b)),
    "wiles" "(" <e:Expr> ")" <b:Block> => ast::Stmt::Wiles(e, Box::new(b)),
    "func" <s:Symbol> "(" <p:Params> ")" <b:Block> => ast::Stmt::Func(s, Box::new(p), Box::new(b)),
    "func" <s:Symbol> "(" ")" <b:Block> => ast::Stmt::Func(s, Box::new(ast::Params::Empty), Box::new(b)),
    "enum" <s:Symbol> "{" <k:Kinds> "}" => ast::Stmt::Enum(s, Box::new(k)),
    "break" "(" <Expr> ")" ";" => ast::Stmt::Break(<>),
    <s:SymbolOrIndex> "=" <e:Expr> ";" => ast::Stmt::Assign(s, e),
    <e:Expr> ";" => ast::Stmt::Expr(e),
};

Kinds: ast::Kinds = {
    <kk:Kinds> "," <k:Kind> => ast::Kinds::Kinds(Box::new(kk), k),
    <Kind> => ast::Kinds::Kind(<>)
};

Kind: ast::Kind = {
    <Symbol> => ast::Kind::Empty(<>)
};

Expr: ast::Expr = {
    <l:Expr> "==" <r:Addend> => ast::Expr::Eq(Box::new(l), r),
    <l:Expr> ">" <r:Addend> => ast::Expr::Gt(Box::new(l), r),
    <l:Expr> "<" <r:Addend> => ast::Expr::Lt(Box::new(l), r),
    Addend => ast::Expr::Addend(<>),
    Array => ast::Expr::Array(<>),
};

Array: ast::Array = {
    "[" <Elems> "]" => ast::Array { elems: Box::new(<>) },
    "[" "]" => ast::Array { elems: Box::new(ast::Elems::Empty) },
};

Elems: ast::Elems = {
    <ee:Elems> "," <e:Expr> => ast::Elems::Elems(Box::new(ee), e),
    <Expr> => ast::Elems::Expr(<>),
};

Params: ast::Params = {
    <p:Params> "," <s:Symbol> ":" <g:GenericType> => ast::Params::Params(Box::new(p), (s, g)),
    <s:Symbol> ":" <g:GenericType> => ast::Params::Param(s, g)
}

GenericType: ast::GenericType = {
    "Array" "<" <GenericType> ">" => ast::GenericType::Generic(ast::ValueType::Array, Box::new(<>)),
    <PrimitiveType> => ast::GenericType::Primitive(<>)
}

PrimitiveType: ast::ValueType = {
    "Bool" => ast::ValueType::Bool,
    "Func" => ast::ValueType::Func,
    "Number" => ast::ValueType::Number,
    "String" => ast::ValueType::String,
}

Addend: ast::Addend = {
    <l:Addend> "+" <r:Factor> => ast::Addend::Add(Box::new(l), r),
    <l:Addend> "-" <r:Factor> => ast::Addend::Sub(Box::new(l), r),
    Factor =>  ast::Addend::Factor(<>)
};

Factor: ast::Factor = {
    <l:Factor> "*" <r:Term>  => ast::Factor::Mult(Box::new(l), r),
    <l:Factor> "/" <r:Term> => ast::Factor::Div(Box::new(l), r), 
    Call => ast::Factor::Call(<>),
};

Call: ast::Call = {
    <s:Symbol> "(" <e:Elems> ")" => ast::Call::Call(s, Box::new(e)),
    <s:Symbol> "(" ")" => ast::Call::Call(s, Box::new(ast::Elems::Empty)),
    Index => ast::Call::Index(<>)
};

SymbolOrIndex: ast::SymbolOrIndex = {
    <s:Symbol> "[" <e:Expr> "]" => ast::SymbolOrIndex::Index(s, Box::new(e)),
    <Symbol> => ast::SymbolOrIndex::Symbol(<>)
}

Index: ast::Index = {
    <s:Symbol> "[" <e:Expr> "]" => ast::Index::Index(s, Box::new(e)),
    Term => ast::Index::Term(<>)
}

Term: ast::Term = {
    Symbol => ast::Term::Symbol(<>),
    Num => ast::Term::Num(<>),
    Str => ast::Term::String(<>)
};

Symbol: String = {
    r"[a-zA-Z]+" => String::from_str(<>).unwrap()
};

Num: f32 = {
    r"-?[0-9]+(\.[0-9]+)?" => f32::from_str(<>).unwrap(),
};

Str: String = {
    r"'[^']*'" => String::from_str(&<>[1..<>.len() - 1]).unwrap(),
};