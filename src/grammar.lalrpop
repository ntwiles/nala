use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <Block> => ast::Program::Block(<>),
    <Stmts> => ast::Program::Stmts(<>)
} 

Block: ast::Block = {
    "{" <Stmts> "}" => ast::Block { stmts: <> }
}

pub Stmts: ast::Stmts = {
    <ss:Stmts> <s:Stmt> => ast::Stmts::Stmts(Box::new(ss), s),
    Stmt => ast::Stmts::Stmt(<>),
};

Stmt: ast::Stmt = {
    "print" <Expr> ";" => ast::Stmt::Print(<>),
    "const" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, false),
    "mut" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e, true),
    "if" "(" <e:Expr> ")" <b:Block> => ast::Stmt::If(e, Box::new(b)),
    "for" <s:Symbol> "in" <e:Expr> <b:Block> => ast::Stmt::For(s,e, Box::new(b)),
    "func" <s:Symbol> "(" ")" <b:Block> => ast::Stmt::Func(s, Box::new(b)),
    <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Assign(s, e),
};

Expr: ast::Expr = {
    <l:Expr> "==" <r:Addend> => ast::Expr::Eq(Box::new(l), r),
    <l:Expr> ">" <r:Addend> => ast::Expr::Gt(Box::new(l), r),
    <l:Expr> "<" <r:Addend> => ast::Expr::Lt(Box::new(l), r),
    Addend => ast::Expr::Addend(<>),
    Array => ast::Expr::Array(<>),
    "read" => ast::Expr::Read,
    "readnum" => ast::Expr::ReadNum,
    <s:Symbol> "[" <e:Expr> "]" => ast::Expr::Index(s, Box::new(e)),
};

Array: ast::Array = {
    "[" <Elems> "]" => ast::Array { elems: Box::new(<>) } 
};

Elems: ast::Elems = {
    <ee:Elems> "," <e:Expr> => ast::Elems::Elems(Box::new(ee), e),
    <Expr> => ast::Elems::Expr(<>)
}

Addend: ast::Addend = {
    <l:Addend> "+" <r:Factor> => ast::Addend::Add(Box::new(l), r),
    <l:Addend> "-" <r:Factor> => ast::Addend::Sub(Box::new(l), r),
    Factor =>  ast::Addend::Factor(<>)
};

Factor: ast::Factor = {
    <l:Factor> "*" <r:Term>  => ast::Factor::Mult(Box::new(l), r),
    <l:Factor> "/" <r:Term> => ast::Factor::Div(Box::new(l), r), 
    Term => ast::Factor::Term(<>)
};

Term: ast::Term = {
    Symbol => ast::Term::Symbol(<>),
    Num => ast::Term::Num(<>),
    Str => ast::Term::String(<>)
};

Symbol: String = {
    r"[a-zA-Z]+" => String::from_str(<>).unwrap()
};

Num: f32 = {
    r"[0-9]+" => f32::from_str(<>).unwrap(),
};

Str: String = {
    r"'[^']*'" => String::from_str(&<>[1..<>.len() - 1]).unwrap(),
};