use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <b:Block> => ast::Program::Block(b),
    <s:Stmts> => ast::Program::Stmts(s)
}

Block: ast::Block = {
    "{" <s:Stmts> "}" => ast::Block { stmts: s }
}

pub Stmts: ast::Stmts = {
    <p:Stmts> <s:Stmt> => ast::Stmts::Stmts(Box::new(p), s),
    <s:Stmt> => ast::Stmts::Stmt(s),
};

Stmt: ast::Stmt = {
    "print" <Expr> ";" => ast::Stmt::Print(<>),
    "const" <s:Symbol> "=" <e:Expr> ";" => ast::Stmt::Declare(s, e),
};

Expr: ast::Expr = {
    <l:Expr> "==" <r:Addend> => ast::Expr::Equal(Box::new(l), r),
    <a:Addend> => ast::Expr::Addend(a)
}

Addend: ast::Addend = {
    <l:Addend> "+" <r:Factor> => ast::Addend::Add(Box::new(l), r),
    <l:Addend> "-" <r:Factor> => ast::Addend::Sub(Box::new(l), r),
    <f:Factor> =>  ast::Addend::Factor(f)
};

Factor: ast::Factor = {
    <l:Factor> "*" <r:Term>  => ast::Factor::Mult(Box::new(l), r),
    <l:Factor> "/" <r:Term> => ast::Factor::Div(Box::new(l), r), 
    <t:Term> => ast::Factor::Term(t)
};

Term: ast::Term = {
    <s:Symbol> => ast::Term::Symbol(s),
    <n:Num> => ast::Term::Num(n),
    <s:Str> => ast::Term::String(s)
};

Symbol: String = {
    <s:r"[a-zA-z]+"> => String::from_str(s).unwrap()
};

Num: f32 = {
    r"[0-9]+" => f32::from_str(<>).unwrap(),
};

Str: String = {
    <s:r"'[a-zA-z0-9\s]*'"> => 
        String::from_str(&s[1..s.len() - 1]).unwrap(),
};